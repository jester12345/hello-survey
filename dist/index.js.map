{"version":3,"sources":["../src/index.js"],"names":["helloSurvey","data","init","console","log","target","document","getElementById","submitFn","addElementTo","method","eventType","eventAction","submit","children","error","parent","element","params","evt","elem","createTextNode","text","createElement","key","appendChild","hasOwnProperty","setAttribute","addEventListener","event","c","preventDefault","elements","Array","prototype","slice","call","filter","disabled","type","tagName","toLowerCase","tagType","checked","map","value","name","multiple","selectedOptions","option"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Builds forms for surveys.\n * @author Arthur McLean <arthur@mclean.ws>\n * @license ISC\n */\nclass helloSurvey {\n    /**\n     * Kick off the application\n     * @param  {obj} data [optional] Data to initialize the survey with.\n     * If data is not provided here, the init function may be called at any time\n     * with the required initialization data.\n     */\n    constructor(data) {\n        if( data ) {\n            // Initialize the survey\n            this.init(data);\n        }\n    }\n\n    init(data) {\n        console.log(\"i data\", data);\n\n        this.target;\n        if( data.target ) {\n            this.target = document.getElementById(data.target);\n        }\n\n        // Do we have a submit function?\n        this.submitFn = false;\n        if( data.submitFn && typeof(data.submitFn) === 'function' ) {\n            this.submitFn = data.submitFn;\n        }\n        console.log(\"this.submitFn\",this.submitFn);\n\n        if( this.target ) {\n            // Build the form\n            this.addElementTo(this.target, 'form', {\n                method: 'post',\n                'accept-charset': 'utf-8'\n            }, {\n                eventType:      'submit',\n                eventAction:    this.submit\n            }, data.children);\n        } else {\n            // Report an error\n            console.error('Required target parameter is missing.');\n        }\n    }\n\n    addElementTo(parent, element, params, evt, children) {\n        // console.log(\"addElementTo\", parent, element, params, evt, children);\n        let elem;\n        if( element === 'textNode' ) {\n            // We are creating a textNode, and there's only one option, params.text... the text for the textNode\n            elem = document.createTextNode(params.text);\n        } else {\n            // We are creating a regular HTML element\n            elem = document.createElement(element);\n\n            if( params ) {\n                for (let key in params) {\n                    if( key === 'text' ) {\n                        // We need to make a text node as a child of the current element\n                        let text = document.createTextNode(params[key]);\n                        elem.appendChild(text);\n                    } else if (params.hasOwnProperty(key)) {\n                        elem.setAttribute(key, params[key]);\n                    }\n                }\n            }\n\n            if( evt ) {\n                elem.addEventListener(evt.eventType, (event) => {\n                    evt.eventAction(event);\n                });\n            }\n\n            if( children ) {\n                for ( let c in children ) {\n                    this.addElementTo(elem, children[c].element, children[c].params, children[c].event, children[c].children);\n                }\n            }\n        }\n\n        parent.appendChild(elem);\n    }\n\n\n    /**\n     * Called when the form is submitted. First, we parse the form and turn it into a JSON\n     * data block. Special thanks to zzzzBov on Stack Overflow for a shove in the right direction:\n     * https://stackoverflow.com/questions/30964568/how-to-get-a-key-value-data-set-from-a-html-form\n     * Then, we follow the user's directions in terms of what to do with it.\n     * \n     * @param  {obj} event  The submit event object\n     */\n    submit(event) {\n        event.preventDefault();\n        // console.log('submit called!', event);\n        // console.log('form', event.target);\n        // console.log('elements', event.target.elements);\n\n        if( event && event.target && event.target.elements ) {\n            let data = Array.prototype.slice.call(event.target.elements)\n            .filter(function (element) {\n                // Remove disabled elements\n                return !element.disabled;\n            }).filter(function (element) {\n                // Remove buttons\n                return element.type !== 'submit' && element.type !== 'reset' && element.tagName.toLowerCase() !== 'button';\n            }).filter(function(element) {\n\n                let tagName = element.tagName.toLowerCase();\n                let tagType = element.type.toLowerCase();\n                // console.log(\"check this one\", element.type);\n                if( tagName === 'input' && (tagType === 'checkbox' || tagType === 'radio') ) {\n                    // Is it checked?\n                    return element.checked;\n                } else {\n                    // Pass it on\n                    return true;\n                }\n            }).map(function (element) {\n                \n                let key, value;\n                switch ( element.tagName.toLowerCase() ) {\n                    case 'checkbox':\n                    case 'radio':\n                        key     = element.name;\n                        value   = element.value === null ? 'on' : element.value;\n                        return { [key]: value };\n                    case 'select':\n                        key     = element.name;\n                        value   = element.value;\n                        if (element.multiple) {\n                            value = slice.call(element.selectedOptions)\n                                .map(function (option) {\n                                    return option.value;\n                                })\n                            return { [key]: value };\n                        } else {\n                            return { [key]: value };\n                        }\n                    default:\n                        key     = element.name;\n                        value   = element.value || '';\n                        return { [key]: value };\n                }\n            });\n            // console.log(\"newElems\", newElems);\n            console.log(\"submit data:\", data);\n\n            if( this.submitFn ) {\n                // Call a submit function\n                this.submitFn(data);\n            }\n        }\n\n        \n    }\n}"]}