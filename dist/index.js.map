{"version":3,"sources":["../src/index.js"],"names":["helloSurvey","data","init","target","document","getElementById","console","error","submitFn","warn","addElementTo","method","eventType","eventAction","submit","bind","children","parent","element","params","evt","elem","createTextNode","text","createElement","key","appendChild","hasOwnProperty","setAttribute","addEventListener","event","c","preventDefault","elements","Array","prototype","slice","call","filter","disabled","type","tagName","toLowerCase","tagType","checked","map","value","name","multiple","selectedOptions","option"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Builds forms for surveys.\n * @author Arthur McLean <arthur@mclean.ws>\n * @license ISC\n */\nclass helloSurvey {\n  /**\n   * Kick off the application\n   * @param  {obj} data [optional] Data to initialize the survey with.\n   * If data is not provided here, the init function may be called at any time\n   * with the required initialization data.\n   */\n  constructor (data) {\n    if (data) {\n      // Initialize the survey\n      this.init(data);\n    }\n  }\n\n  init (data) {\n    if (data.target) {\n      this.target = document.getElementById(data.target);\n    } else {\n      // Report an error\n      console.error('Required target parameter is missing.');\n      return;\n    }\n\n    // Default submit function\n    this.submitFn = function(data) {\n      console.warn('Form submitted successfully, but without a submit function to send data to. No action taken.', data);\n    };\n\n    // Do we have a submit function?\n    if (data.submitFn && typeof(data.submitFn) === 'function') {\n      this.submitFn = data.submitFn;\n    } else {\n      console.warn('No submit function defined.');\n    }\n\n    // Build the form\n    this.addElementTo(this.target, 'form', {\n      method: 'post',\n      'accept-charset': 'utf-8'\n    }, {\n      eventType:      'submit',\n      eventAction:    this.submit.bind(this)\n    }, data.children);\n  }\n\n  addElementTo (parent, element, params, evt, children) {\n    let elem;\n    if (element === 'textNode') {\n      // We are creating a textNode, and there's only one option, params.text... the text for the textNode\n      elem = document.createTextNode(params.text);\n    } else {\n      // We are creating a regular HTML element\n      elem = document.createElement(element);\n\n      if (params) {\n        for (let key in params) {\n          if (key === 'text') {\n            // We need to make a text node as a child of the current element\n            let text = document.createTextNode(params[key]);\n            elem.appendChild(text);\n          } else if (params.hasOwnProperty(key)) {\n            elem.setAttribute(key, params[key]);\n          }\n        }\n      }\n\n      if (evt) {\n        elem.addEventListener(evt.eventType, (event) => {\n          evt.eventAction(event);\n        });\n      }\n\n      if (children) {\n        for (let c in children) {\n          this.addElementTo(elem, children[c].element, children[c].params, children[c].event, children[c].children);\n        }\n      }\n    }\n\n    parent.appendChild(elem);\n  }\n\n\n  /**\n   * Called when the form is submitted. First, we parse the form and turn it into a JSON\n   * data block. Special thanks to zzzzBov on Stack Overflow for a shove in the right direction:\n   * https://stackoverflow.com/questions/30964568/how-to-get-a-key-value-data-set-from-a-html-form\n   * Then, we follow the user's directions in terms of what to do with it.\n   *\n   * @param  {obj} event  The submit event object\n   */\n  submit(event) {\n    event.preventDefault();\n\n    if (event && event.target && event.target.elements) {\n      let data = Array.prototype.slice.call(event.target.elements)\n        .filter(function (element) {\n          // Remove disabled elements\n          return !element.disabled;\n        }).filter(function (element) {\n          // Remove buttons\n          return element.type !== 'submit' && element.type !== 'reset' && element.tagName.toLowerCase() !== 'button';\n        }).filter(function (element) {\n          let tagName = element.tagName.toLowerCase();\n          let tagType = element.type.toLowerCase();\n          if (tagName === 'input' && (tagType === 'checkbox' || tagType === 'radio')) {\n            // Is it checked?\n            return element.checked;\n          } else {\n            // Pass it on\n            return true;\n          }\n        }).map(function (element) {\n          let key, value;\n          switch (element.tagName.toLowerCase()) {\n            case 'checkbox':\n            case 'radio':\n              key   = element.name;\n              value = element.value === null ? 'on' : element.value;\n              return { [key]: value };\n            case 'select':\n              key   = element.name;\n              value = element.value;\n              if (element.multiple) {\n                value = slice.call(element.selectedOptions)\n                  .map(function (option) {\n                    return option.value;\n                  });\n                return { [key]: value };\n              } else {\n                return { [key]: value };\n              }\n            default:\n              key   = element.name;\n              value = element.value || '';\n              return { [key]: value };\n          }\n        });\n\n      // Call a submit function\n      this.submitFn(data);\n    } else {\n      // TODO: explain why this didn't run\n    }\n  }\n}"]}